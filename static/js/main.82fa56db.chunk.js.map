{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","RARIBLE_LINK","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","chainId","alert","accounts","length","account","setupEventListener","connectWallet","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","open","focus","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82fa56db.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = 'umluizlima';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x3ce4B6CDd9173c15D1BE64353f11bd83B506c60d\";\nconst RARIBLE_LINK = `https://rinkeby.rarible.com/collection/${CONTRACT_ADDRESS}`;\n\nconst App = () => {\n\n  /*\n  * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  /*\n  * Gotta make sure this is async.\n  */\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    // String, hex code of the chainId of the Rinkebey test network\n    const rinkebyChainId = \"0x4\";\n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n    }\n\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    /*\n    * User can have multiple authorized accounts, we grab the first one if its there!\n    */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. Here's the link: https://rinkeby.rarible.com/token/${CONTRACT_ADDRESS}:${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Meta Creatures</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Mint yours.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint Meta Creature\n            </button>\n          )}\n          <div>\n            <button onClick={() => window.open(RARIBLE_LINK, \"_blank\").focus()} className=\"cta-button rarible-button\">\n              See collection\n            </button>\n          </div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}